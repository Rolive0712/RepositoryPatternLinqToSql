using System.Configuration;

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.544
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Remondo.Database
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;


    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "Remondo")]
    public partial class HotelDataContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertHotel(Hotel instance);
        partial void UpdateHotel(Hotel instance);
        partial void DeleteHotel(Hotel instance);
        partial void InsertCity(City instance);
        partial void UpdateCity(City instance);
        partial void DeleteCity(City instance);
        #endregion

        public HotelDataContext() :
            base(ConfigurationManager.ConnectionStrings["RemondoConnectionString"].ConnectionString, mappingSource)
        {
            OnCreated();
        }

        public HotelDataContext(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public HotelDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public HotelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public HotelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<Hotel> Hotels
        {
            get
            {
                return this.GetTable<Hotel>();
            }
        }

        public System.Data.Linq.Table<City> Cities
        {
            get
            {
                return this.GetTable<City>();
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Hotel")]
    public partial class Hotel : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Name;

        private int _City_ID;

        private int _Stars;

        private EntityRef<City> _City;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnCity_IDChanging(int value);
        partial void OnCity_IDChanged();
        partial void OnStarsChanging(int value);
        partial void OnStarsChanged();
        #endregion

        public Hotel()
        {
            this._City = default(EntityRef<City>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "VarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_City_ID", DbType = "Int NOT NULL")]
        public int City_ID
        {
            get
            {
                return this._City_ID;
            }
            set
            {
                if ((this._City_ID != value))
                {
                    if (this._City.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnCity_IDChanging(value);
                    this.SendPropertyChanging();
                    this._City_ID = value;
                    this.SendPropertyChanged("City_ID");
                    this.OnCity_IDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Stars", DbType = "Int NOT NULL")]
        public int Stars
        {
            get
            {
                return this._Stars;
            }
            set
            {
                if ((this._Stars != value))
                {
                    this.OnStarsChanging(value);
                    this.SendPropertyChanging();
                    this._Stars = value;
                    this.SendPropertyChanged("Stars");
                    this.OnStarsChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "City_Hotel", Storage = "_City", ThisKey = "City_ID", OtherKey = "ID", IsForeignKey = true)]
        public City City
        {
            get
            {
                return this._City.Entity;
            }
            set
            {
                City previousValue = this._City.Entity;
                if (((previousValue != value)
                            || (this._City.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._City.Entity = null;
                        previousValue.Hotels.Remove(this);
                    }
                    this._City.Entity = value;
                    if ((value != null))
                    {
                        value.Hotels.Add(this);
                        this._City_ID = value.ID;
                    }
                    else
                    {
                        this._City_ID = default(int);
                    }
                    this.SendPropertyChanged("City");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.City")]
    public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Name;

        private EntitySet<Hotel> _Hotels;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public City()
        {
            this._Hotels = new EntitySet<Hotel>(new Action<Hotel>(this.attach_Hotels), new Action<Hotel>(this.detach_Hotels));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "VarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "City_Hotel", Storage = "_Hotels", ThisKey = "ID", OtherKey = "City_ID")]
        public EntitySet<Hotel> Hotels
        {
            get
            {
                return this._Hotels;
            }
            set
            {
                this._Hotels.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Hotels(Hotel entity)
        {
            this.SendPropertyChanging();
            entity.City = this;
        }

        private void detach_Hotels(Hotel entity)
        {
            this.SendPropertyChanging();
            entity.City = null;
        }
    }
}
#pragma warning restore 1591
